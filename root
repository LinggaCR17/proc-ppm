#!/bin/sh

PROC_PATH="${0%/*}"

PPM_PATH="$(cat /proc/ppm/*/*); $(cat /proc/ppm/*)"
MODPROC="/data/adb/modules/proc_ppm"
INFO_LOG="${PROC_PATH}/info.log"
ERROR_LOG="${PROC_PATH}/error.log"

# DEBUG_LOG="${PROC_PATH}/debug.log"

# The name of the current branch for logging purposes
BRANCH="mods"
UINT_MAX="4294967295"
SCHED_PERIOD="$((1 * 1000 * 1000))"
SCHED_TASKS="10"

# Log the date and time for records sake
echo "Time of execution: $(date)"
echo "Branch: $BRANCH"

_del_logging() {
    if [ -f "$PROC_PATH/error.log" ] || [ -f "$PROC_PATH/info.log" ]; then
        if [ -f "$MODPROC/proc_ppm" ]; then
            rm -rf "$PROC_PATH/error.log" \
                "$PROC_PATH/info.log" \
                "$MODPROC/ppm_logs"
        fi
    fi
}; _del_logging

log_init() {
    :> "$INFO_LOG"
    :> "$ERROR_LOG"
    # :> "$DEBUG_LOG" 
}

_log_proc() {
    local log=$1
    shift
    while [ "$#" -gt 0 ]
    do
        local message="$1"
        echo "[$(date "+%H:%M:%S")] $message" >> "$log"
        shift
    done
}

log_info() {
    _log_proc "$INFO_LOG" "$@"
}

log_error() {
    _log_proc "$ERROR_LOG" "$@"
}

# log_debug() {
#     _log_proc "$DEBUG_LOG" "$@"
# }

write() {
    local file="$1"
    local value="$2"
    
    [ -f "$file" ] || {
        log_error "Error: File $file does not exist."
        return 1
    }
    
    chmod +w "$file" 2>/dev/null
    
    echo "$value" >"$file" 2>/dev/null || {
        log_error "Error: Failed to write to $file."
        return 1
    }
    return 0
}

boot_opt_apply() {
    log_info "Device: $(getprop ro.product.system.model)" \
        "Brand: $(getprop ro.product.system.brand)" \
        "Kernel: $(uname -r)" \
        "Rom build-type: $(getprop ro.system.build.type)" \
        "Android Version: $(getprop ro.system.build.version.release)" \
        "Applying boot optimization"
    
    sync # Sinkronisasi sebelum eksekusi untuk menghindari kehilangan data
    
    # Mengoptimalkan read_ahead_kb dan nr_requests
    for proc_ppm in $(find /sys/block/*/queue/* -type f -name "read_ahead_kb" -o -name "nr_requests")
    do
        [ -f "$proc_ppm" ] && {
            write "${proc_ppm}" 2048 || log_error "Failed to write to $proc_ppm"
            write "${proc_ppm}" 512 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    # Menonaktifkan clkgate_enable, clkscale_enable, dan hibern8_on_idle_enable
    for proc_ppm in $(find /sys/devices/platform/*/*/* -type f -name "clkgate_enable" -o -name "clkscale_enable" -o -name "hibern8_on_idle_enable")
    do
        [ -f "$proc_ppm" ] && {
            write "$proc_ppm" 0 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    log_info "Done." ""
}

boot_opt_reset() {
    log_info "Resetting parameters from boot optimization"
    
    sync # Sinkronisasi sebelum eksekusi untuk menghindari kehilangan data
    
    # Mengaktifkan kembali clkgate_enable, clkscale_enable, dan hibern8_on_idle_enable
    for proc_ppm in $(find /sys/devices/platform/*/*/* -type f -name "clkgate_enable" -o -name "clkscale_enable" -o -name "hibern8_on_idle_enable")
    do
        [ -f "$proc_ppm" ] && {
            write "$proc_ppm" 1 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    # Mengatur kembali nilai read_ahead_kb dan nr_requests ke nilai default
    for proc_ppm in $(find /sys/block/*/queue/* -type f -name "read_ahead_kb" -o -name "nr_requests")
    do
        [ -f "$proc_ppm" ] && {
            write "${proc_ppm}" 128 || log_error "Failed to write to $proc_ppm"
            write "${proc_ppm}" 64 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    log_info "Done." ""
}; boot_opt_reset

anti_debugging() {
    log_info "Disabling Debugging"
    
    sync # Sinkronisasi sebelum eksekusi untuk menghindari kehilangan data
    
    # Menonaktifkan debugging di berbagai file
    for proc_ppm in $(find /sys/block/*/queue/* -type f -name "iostats") \
        $(find /sys/module/*/parameters/* -type f -name "debug_mask" -o -name "debug_level")
    do
        [ -f "$proc_ppm" ] && {
            write "$proc_ppm" 0 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    # Menghentikan servis logd jika sedang berjalan
    if [ "$(getprop init.svc.logd)" = running ]; then
        stop logd || log_error "Failed to stop logd service"
    fi
    
    # Menghentikan servis statsd jika sedang berjalan
    if [ "$(getprop init.svc.statsd)" = running ]; then
        stop statsd || log_error "Failed to stop statsd service"
    fi
    
    # Menonaktifkan debugging di berbagai file dan direktori
    for proc_ppm in /proc/sys/{debug/exception-trace,fs/dir-notify-enable} \
        /proc/sys/debug/kernel/{compat_log,sched_schedstats} \
        /proc/sys/vm/{block_dump,oom_dump_tasks} \
        /sys/kernel/debug/kgsl/kgsl-3d0/{log_level_cmd,log_level_ctxt,log_level_mem,log_level_pwr} \
        /sys/kernel/{debug/tracing/tracing_on,printk_mode,tracing/tracing_on} \
        /sys/module/{debug/parameters/enable_event_log,ext4/parameters/mballoc_debug,mali/parameters/mali_debug_level,mmc_core/parameters/use_spi_crc,msm_show_resume_irq/parameters/debug_mask,rmnet_data/parameters/rmnet_data_log_level,rpm_smd/parameters/debug_mask,subsystem_restart/parameters/enable_ramdumps} \
        /sys/module/{logd,logger}/parameters/enabled
    do
        [ -f "$proc_ppm" ] && {
            write "$proc_ppm" 0 || log_error "Failed to write to $proc_ppm"
        }
    done
    
    # Menonaktifkan debugging di berbagai file kernel
    for proc_ppm in /proc/sys/kernel
    do
        write "$proc_ppm/printk" '0 0 0 0' || log_error "Failed to write to $proc_ppm/printk"
        write "$proc_ppm/printk_devkmsg" off || log_error "Failed to write to $proc_ppm/printk_devkmsg"
    done
    
    # Menonaktifkan debugging di berbagai modul kernel
    write /proc/sys/vm/stat_interval 10 || log_error "Failed to write to /proc/sys/vm/stat_interval"
    write /sys/kernel/debug/debug_enabled N || log_error "Failed to write to /sys/kernel/debug/debug_enabled"
    write /sys/module/ip6_tunnel/parameters/log_ecn_error N || log_error "Failed to write to /sys/module/ip6_tunnel/parameters/log_ecn_error"
    write /sys/module/overheat_mitigation/parameters/enable 0 || log_error "Failed to write to /sys/module/overheat_mitigation/parameters/enable"
    
    # Menonaktifkan debugging di modul printk
    for proc_ppm in /sys/module/printk/parameters
    do
        write "$proc_ppm/console_suspend" Y || log_error "Failed to write to $proc_ppm/console_suspend"
        write "$proc_ppm/cpu" N || log_error "Failed to write to $proc_ppm/cpu"
        write "$proc_ppm/ignore_loglevel" Y || log_error "Failed to write to $proc_ppm/ignore_loglevel"
        write "$proc_ppm/pid" N || log_error "Failed to write to $proc_ppm/pid"
        write "$proc_ppm/time" N || log_error "Failed to write to $proc_ppm/time"
    done
    
    log_info "Done." ""
}; anti_debugging

hrtick() {
    log_info "Trying to enable HRTICK"
    sync # Sinkronisasi sebelum eksekusi untuk menghindari kehilangan data
    
    # Mencari semua file di direktori /proc/ppm dan mencoba mengaktifkan HRTICK
    for proc_ppm in /sys/kernel/debug/sched_features/*
    do
        write "$proc_ppm" HRTICK && \
            log_info "HRTICK has been enabled in $proc_ppm" || \
            { 
                log_info "HRTICK is NOT supported in $proc_ppm" 
                log_info "Done." ""
            }
    done
}; hrtick

kprofile() {
    log_info "Applying Kernel Fix"
    sync # Sinkronisasi sebelum eksekusi untuk menghindari kehilangan data
    
    # Mengatur nilai max_map_count untuk memperbaiki bug dari mainline kernel
    for proc_ppm in /proc/sys/vm/max_map_count
    do
        write "$proc_ppm" 1048576 || log_error "Failed to write to $proc_ppm"
    done
    
    log_info "Done." ""
}; kprofile

kstune() {
    log_info "Applying stune tweaks"
    sync # Sync before execution to avoid crashes
    
    # File dan nilai yang akan dimodifikasi
    file_boost="/dev/stune/top-app/schedtune.boost"
    file_prefer_idle1="/dev/stune/top-app/schedtune.prefer_idle"
    file_prefer_idle2="/dev/stune/foreground/schedtune.prefer_idle"
    
    value_boost="10"
    value_prefer_idle1="0"
    value_prefer_idle2="0"
    
    # Menulis nilai ke setiap file
    write "$value_boost" "$file_boost"
    write "$value_prefer_idle1" "$file_prefer_idle1"
    write "$value_prefer_idle2" "$file_prefer_idle2"
    
    # Komentar: Menulis nilai ke setiap file cpuset
    # write /dev/cpuset/background/cpus '0-3'
    # write /dev/cpuset/foreground/cpus '0-7'
    
    log_info "Done."
}; kstune

# Sync to data in the rare case a device crashes
sync

# Limit max perf event processing time to this much CPU usage
write /proc/sys/kernel/perf_cpu_time_max_percent 3

# Group tasks for less stutter but less throughput
write /proc/sys/kernel/sched_autogroup_enabled 1

# Execute child process before parent after fork
write /proc/sys/kernel/sched_child_runs_first 1

# Preliminary requirement for the following values
write /proc/sys/kernel/sched_tunable_scaling 1

# Reduce the maximum scheduling period for lower latency
write /proc/sys/kernel/sched_latency_ns "$SCHED_PERIOD"

# Schedule this ratio of tasks in the guarenteed sched period
write /proc/sys/kernel/sched_min_granularity_ns "$((SCHED_PERIOD / SCHED_TASKS))"

# Require preeptive tasks to surpass half of a sched period in vmruntime
write /proc/sys/kernel/sched_wakeup_granularity_ns "$((SCHED_PERIOD / 2))"

# Reduce the frequency of task migrations
write /proc/sys/kernel/sched_migration_cost_ns 5000000

# Always allow sched boosting on top-app tasks
[[ "$ANDROID" == true ]] && {
    write /proc/sys/kernel/sched_min_task_util_for_colocation 0
}

# Improve real time latencies by reducing the scheduler migration time
write /proc/sys/kernel/sched_nr_migrate 4

# Disable scheduler statistics to reduce overhead
write /proc/sys/kernel/sched_schedstats 0

# Disable unnecessary printk logging
write /proc/sys/kernel/printk_devkmsg off

# Start non-blocking writeback later
write /proc/sys/vm/dirty_background_ratio 15

# Start blocking writeback later
write /proc/sys/vm/dirty_ratio 25

# Require dirty memory to stay in memory for longer
write /proc/sys/vm/dirty_expire_centisecs 3000

# Run the dirty memory flusher threads less often
write /proc/sys/vm/dirty_writeback_centisecs 3000

# Disable read-ahead for swap devices
write /proc/sys/vm/page-cluster 0

# Update /proc/stat less often to reduce jitter
write /proc/sys/vm/stat_interval 10

# Swap to the swap device at a fair rate
write /proc/sys/vm/swappiness 80

# Prioritize page cache over simple file structure nodes
write /proc/sys/vm/vfs_cache_pressure 200

# Enable Explicit Congestion Control
write /proc/sys/net/ipv4/tcp_ecn 1

# Enable fast socket open for receiver and sender
write /proc/sys/net/ipv4/tcp_fastopen 3

# Disable SYN cookies
write /proc/sys/net/ipv4/tcp_syncookies 0

if [[ -f "/sys/kernel/debug/sched_features" ]]
then
    # Consider scheduling tasks that are eager to run
    write /sys/kernel/debug/sched_features NEXT_BUDDY
    
    # Some sources report large latency spikes during large migrations
    write /sys/kernel/debug/sched_features NO_TTWU_QUEUE
fi

[[ "$ANDROID" == true ]] && {
if [[ -d "/dev/stune/" ]]
then
    # Prefer to schedule top-app tasks on idle CPUs
    write /dev/stune/top-app/schedtune.prefer_idle 0
    
    # Mark top-app as boosted, find high-performing CPUs
    write /dev/stune/top-app/schedtune.boost 1
fi
}

# Loop over each CPU in the system
for cpu in /sys/devices/system/cpu/cpu*/cpufreq
do
    # Fetch the available governors from the CPU
    avail_govs="$(cat "$cpu/scaling_available_governors")"
    
    # Attempt to set the governor in this order
    for governor in schedutil interactive ondemand
    do
        # Once a matching governor is found, set it and break for this CPU
        if [[ "$avail_govs" == *"$governor"* ]]
        then
            write "$cpu/scaling_governor" "$governor"
            break
        fi
    done
done

# Apply governor specific tunables for CPUs
find /sys/devices/system/cpu/ -name schedutil -o -name interactive -o -name ondemand -type d | while IFS= read -r governor
do
    # Consider changing frequencies once per scheduling period
    write "$governor/up_rate_limit_us" 0
    write "$governor/down_rate_limit_us" 0
    write "$governor/rate_limit_us" 0
    write "$governor/timer_rate" 0
    write "$governor/min_sample_time" 0
    
    # Jump to hispeed frequency at this load percentage
    write "$governor/hispeed_load" 85
    write "$governor/hispeed_freq" "$UINT_MAX"
done

for queue in /sys/block/*/queue
do
    # Choose the first governor available
    avail_scheds="$(cat "$queue/scheduler")"
    for sched in cfq noop kyber bfq mq-deadline none
    do
        if [[ "$avail_scheds" == *"$sched"* ]]
        then
            write "$queue/scheduler" "$sched"
            break
        fi
    done
    
    # Do not use I/O as a source of randomness
    write "$queue/add_random" 0
    
    # Disable I/O statistics accounting
    write "$queue/iostats" 0
    
    # Reduce heuristic read-ahead in exchange for I/O latency
    write "$queue/read_ahead_kb" 32
    
    # Reduce the maximum number of I/O requests in exchange for latency
    write "$queue/nr_requests" 32
done

# _unfiltered_function() {
#     
# }; _unfiltered_function

over_clock0() {
    max_freq=$(cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_max_freq)
    
    for proc_ppm in $(find /sys/devices/system/cpu/cpu*/cpufreq/ -type f -name "cpuinfo_min_freq")
    do
        echo $max_freq > $proc_ppm
    done
}; over_clock0

over_clock1() {
    max_freq=$(cat /sys/devices/system/cpu/cpufreq/policy*/cpuinfo_max_freq)
    
    for proc_ppm in $(find /sys/devices/system/cpu/cpufreq/policy*/ -type f -name "cpuinfo_min_freq")
    do
        echo $max_freq > $proc_ppm
    done
}; over_clock1

over_clock2() {
    for proc_ppm in $(find /sys/devices/system/cpu/perf/ -type f -name "enable")
    do
        echo '1' > $proc_ppm
    done
}; over_clock2

k_bine() {
    # suggested by devs
    s029() {
        for proc_ppm in /proc/cpufreq
        do
            echo '0' > $proc_ppm/cpufreq_imax_thermal_protect
            echo '1' > $proc_ppm/cpufreq_cci_mode
            echo '1' > $proc_ppm/cpufreq_imax_enable
            echo '1' > $proc_ppm/cpufreq_sched_disable
            echo '3' > $proc_ppm/cpufreq_power_mode
        done
    }; s029
    
    s030() {
        for proc_ppm in /proc/irq/240
        do
            echo '1' > $proc_ppm/smp_affinity_list
        done
    }; s030
    
    s032() {
        for proc_ppm in $(find /sys/module/*/parameters -type f -name "off")
        do
            echo '1' > $proc_ppm
        done
    }; s032
    
    s035() {
        for proc_ppm in $(find /sys/module/ged/parameters/* -type f -name "boost_amp" -o -name "boost_extra" -o -name "boost_gpu_enable" -o -name "cpu_boost_policy" -o -name "enable_cpu_boost" -o -name "ged_boost_enable" -o -name "ged_force_mdp_enable" -o -name "ged_smart_boost" -o -name "gpu_dvfs_enable" -o -name "gx_boost_on" -o -name "gx_dfps" -o -name "gx_force_cpu_boost" -o -name "gx_game_mode" -o -name "is_GED_KPI_enabled" -o -name "gx_frc_mode")
        do
            echo '1' > $proc_ppm
        done
    }; s035
    
    s036() {
        for proc_ppm in $(find /sys/module/ged/parameters/* -type f -name "gpu_debug_enable" -o -name "deboost_reduce" -o -name "ged_log_trace_enable")
        do
            echo '0' > $proc_ppm
        done
    }; s036
    
    s037() {
        if [ "$(ls /sys/block/zram0)" ] && {
            file_comp=$(cat /sys/block/zram0/max_comp_streams)
            file_algorithm=$(cat /sys/block/zram0/comp_algorithm)
            }
        then
            echo '1' > $proc_ppm/reset
        fi
        
        for proc_ppm in /sys/block/zram0
        do
            echo '$file_comp' > $proc_ppm/max_comp_streams
            echo '$file_algorithm' > $proc_ppm/comp_algorithm
        done
        
        for proc_ppm in $(find /sys/block/zram*/ -type f -name "mem_limit")
        do
            echo '0' > $proc_ppm
            echo '$((4096*8192*16384))' > $proc_ppm
        done
        
        for proc_ppm in $(find /sys/block/zram*/ -type f -name "disksize")
        do
            echo '4294967296' > $proc_ppm
            echo '$((4096*8192*16384))' > $proc_ppm
        done
        
        mkswap /dev/block/zram0
        swapon /dev/block/zram0
    }; s037
}; k_bine

s012() {
# make sure v1
    if [[ "$(id -u)" -ne 0 ]]
    then
        for logs in $PROC_PATH/ppm_logs
        do
    	    echo "No root detected. proc_ppm exited." > $logs
    	done
    	
    	exit 1
    fi
}; s012

grep -q android /proc/cmdline && { 
    ANDROID=true
}

k_dule() {
    s013() {
    # make sure v2
        if [[ "$(getprop sys.boot_completed)" -ne 1 ]] && {
            [[ ! -d "$MODPROC/disable" ]]
        }
        then
            su -lp 2000 -c "cmd notification post -S bigtext -t '7secc' 'Tag' 'proc_ppm executed'"
        else
            su 2000 -c "cmd notification post -S bigtext -t '7secc' 'Tag' 'proc_ppm executed'"
        fi
    }; s013
    
    s014() {
        for proc_ppm in /proc/ppm
        do
            echo '0' > $proc_ppm/debug
            echo '0x0' > $proc_ppm/func_debug
            echo '1' > $proc_ppm/enabled
            echo '1' > $proc_ppm/exclusive_core
        done
    }; s014
    
    s015() {
        for proc_ppm in /proc/ppm/profile
        do
            echo '1' > $proc_ppm/profile_on
        done
    }; s015
    
    s016() {
        for proc_ppm in /proc/ppm; do
            for status in $(seq 0 9); do
                if [ "$status" -eq 8 ]; then
                    echo "$status 1" > "$proc_ppm/policy_status"
                else
                    echo "$status 0" > "$proc_ppm/policy_status"
                fi
            done
        done
    }; s016
    
    s017() {
        for proc_ppm in /proc/ppm/policy; do
            for freq in $(seq 0 7); do
                echo "$freq 0" > "$proc_ppm/sysboost_freq"
            done
        done
    }; s017
    
    s018() {
        for proc_ppm in /proc/ppm/policy; do
            for limit in $(seq 0 7); do
                echo "$limit 0" > "$proc_ppm/sysboost_cluster_freq_limit"
            done
        done
    }; s018
    
    s019() {
        for proc_ppm in /proc/ppm/policy; do
            for limit in $(seq 0 7); do
                echo "$limit 0" > "$proc_ppm/sysboost_cluster_freqidx_limit"
            done
        done
    }; s019
    
    s020() {
        for proc_ppm in /proc/ppm/policy
        do
            echo '0' > $proc_ppm/thermal_limit
        done
    }; s020
    
    s021() {
        for proc_ppm in /proc/sys/kernel
        do
            echo '0 0 0 0' > $proc_ppm/printk
            echo '0' > $proc_ppm/panic
            echo '0' > $proc_ppm/sched_cstate_aware
            echo '0' > $proc_ppm/sched_energy_aware
            echo '0' > $proc_ppm/sched_schedstats
            echo '1' > $proc_ppm/sched_autogroup_enabled
            echo '1' > $proc_ppm/sched_child_runs_first
            echo '1' > $proc_ppm/sched_sync_hint_enable
            echo '1' > $proc_ppm/sched_tunable_scaling
        done
    }; s021
    
    s022() {
        for proc_ppm in /proc/driver/thermal
        do
            echo polling_interval 0 > $proc_ppm/tztsAll_enable
            echo switch 1 > $proc_ppm/tztsAll_enable
        done
    }; s022
    
    s023() {
        for proc_ppm in $(find /sys/devices/virtual/thermal/*/* -type f -name "mode")
        do
            echo 'disabled' > $proc_ppm
        done
    }; s023
    
    s024() {
        for proc_ppm in /proc/gpufreq
        do
            echo '0' > $proc_ppm/gpufreq_opp_stress_test
        done
    }; s024
    
    s025() {
        for proc_ppm in /proc/cpufreq
        do
            echo '0' > $proc_ppm/cpufreq_debug
            echo '0' > $proc_ppm/cpufreq_sched_disable
            echo '0' > $proc_ppm/cpufreq_stress_test
            echo '3' > $proc_ppm/cpufreq_power_mode
            
            for profile in {0..5}
            do
                echo "$profile 0" > $proc_ppm/cpufreq_dvfs_time_profile
            done
        done
    }; s025
    
    s026() {
        for proc_ppm in /proc/cpufreq/*/
        do
            echo '1' > $proc_ppm/cpufreq_turbo_mode
        done
    }; s026
    
    s027() {
        for proc_ppm in /proc/sys/vm
        do
            echo '15' > $proc_ppm/dirty_background_ratio
            echo '23500' > $proc_ppm/extra_free_kbytes
            echo '25' > $proc_ppm/dirty_ratio
            echo '6022' > $proc_ppm/min_free_kbytes
            echo '80' > $proc_ppm/swappiness
        done
    }; s027
    
    s028() {
        for proc_ppm in $(find /sys/devices/virtual/thermal/*/*/* -type f -name "skin-therm-adc" -o -name "skin-therm-monitor")
        do
            echo 'disable' > $proc_ppm
        done
    }; s028
}; k_dule

for logger in $PROC_PATH/ppm_logs
do
# logger
    echo $PPM_PATH > $logger
done

sync # Sync before execute to avoid crashes
