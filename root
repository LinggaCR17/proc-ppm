#!/bin/sh

PROC_PATH="${0%/*}"

PPM_PATH="$(cat /proc/ppm/*)"
MODPROC="/data/adb/modules/proc_ppm"

INFO_LOG=${PROC_PATH}/info.log
ERROR_LOG=${PROC_PATH}/error.log

# DEBUG_LOG=${PROC_PATH}/debug.log

log_init() {
    :> "$INFO_LOG"
    :> "$ERROR_LOG"
    # :> "$DEBUG_LOG" 
}

_log_tweaks() {
    local log=$1
    shift
    while (( "$#" )); do
        local message="$1"
        echo "[$(date "+%H:%M:%S")] $message" >> "$log"
        shift
    done
}

log_info() {
    _log_tweaks "$INFO_LOG" "$@"
}

log_error() {
    _log_tweaks "$ERROR_LOG" "$@"
}

# log_debug() {
#     _log_tweaks "$DEBUG_LOG" "$@"
# }

write() {
    local file="$1"
    local value="$2"
    
    [ -f "$file" ] || {
        log_error "Error: File $file does not exist."
        return 1
    }
    
    chmod +w "$file" 2>/dev/null
    
    echo "$value" >"$file" 2>/dev/null || {
        log_error "Error: Failed to write to $file."
        return 1
    }
    return 0
}

bootopt_apply() {
    log_info "Device: $(getprop ro.product.system.model)" \
        "Brand: $(getprop ro.product.system.brand)" \
        "Kernel: $(uname -r)" \
        "Rom build type: $(getprop ro.system.build.type)" \
        "Android Version: $(getprop ro.system.build.version.release)" \
        "Applying boot optimization"
    sync # Sync before execute to avoid crashes
    
    for proc_ppm in $(find /sys/block/*/* -type f -name "queue"); do
        write "${i}/read_ahead_kb" 2048
        write "${i}/nr_requests" 512
    done
    
    for proc_ppm in clkgate_enable clkscale_enable hibern8_on_idle_enable; do
        write /sys/devices/platform/soc/1d84000.ufshc/$i 0
    done
    log_info "Done."
}

bootopt_reset() {
    log_info "Resetting parameters from boot optimization"
    
    for proc_ppm in clkgate_enable clkscale_enable hibern8_on_idle_enable; do
        write /sys/devices/platform/soc/1d84000.ufshc/$i 1
    done
    
    for proc_ppm in $(find /sys/block/*/* -type f -name "queue"); do
        write "${i}/read_ahead_kb" 128
        write "${i}/nr_requests" 64
    done
    log_info "Done."
}

disable_debugging() {
    log_info "Disabling Debugging"
    sync # Sync before execute to avoid crashes
    
    for proc_ppm in /sys/block/*/queue/iostats /sys/module/*/parameters/{debug_mask,debug_level}; do
        write "$i" 0
    done
    
    [ "$(getprop init.svc.logd)" = running ] && stop logd
    [ "$(getprop init.svc.statsd)" = running ] && stop statsd
    
    for proc_ppm in /proc/sys/{debug/exception-trace,fs/dir-notify-enable} \
        /proc/sys/debug/kernel/{compat_log,sched_schedstats} \
        /proc/sys/vm/{block_dump,oom_dump_tasks} \
        /sys/kernel/debug/kgsl/kgsl-3d0/{log_level_cmd,log_level_ctxt,log_level_mem,log_level_pwr} \
        /sys/kernel/{debug/tracing/tracing_on,printk_mode,tracing/tracing_on} \
        /sys/module/{debug/parameters/enable_event_log,ext4/parameters/mballoc_debug,mali/parameters/mali_debug_level,mmc_core/parameters/use_spi_crc,msm_show_resume_irq/parameters/debug_mask,rmnet_data/parameters/rmnet_data_log_level,rpm_smd/parameters/debug_mask,subsystem_restart/parameters/enable_ramdumps} \
        /sys/module/{logd,logger}/parameters/enabled; do
        write "$i" 0
    done
    write /proc/sys/vm/stat_interval 10
    write /sys/module/printk/parameters/console_suspend Y
    write /proc/sys/kernel/printk_devkmsg off
    write /proc/sys/kernel/printk 0 0 0 0
    write /sys/module/printk/parameters/cpu N
    write /sys/module/printk/parameters/ignore_loglevel Y
    write /sys/module/printk/parameters/pid N
    write /sys/module/printk/parameters/time N
    write /sys/kernel/debug/debug_enabled N
    write /sys/module/ip6_tunnel/parameters/log_ecn_error N
    log_info "Done."
}

hrtick() {
    log_info "Trying to enable HRTICK"
    sync # Sync before execute to avoid crashes
    
    write /sys/kernel/debug/sched_features HRTICK || # Enable HRTICK
        log_info "HRTICK is NOT supported" ||
        log_info "Done."
}

kernelfix() {
    log_info "Applying Kernel Fix"
    sync # Sync before execute to avoid crashes
    
    write /proc/sys/vm/max_map_count 1048576 # fix bug from mainline
    log_info "Done."
}

stune() {
    log_info "Appying stune tweaks"
    sync # Sync before execute to avoid crashes
    
    write /dev/stune/top-app/schedtune.boost 10
    write /dev/stune/top-app/schedtune.prefer_idle 1
    write /dev/stune/foreground/schedtune.prefer_idle 1
    # write /dev/cpuset/background/cpus 0-3
    # write /dev/cpuset/foreground/cpus 0-7
    log_info "Done."
}
              
            kernelfix
            hrtick
            stune
            disable_debugging
            bootopt_reset
            sync # Sync before execute to avoid crashes
                       
fifth() {
#cause
    if [[ "$(id -u)" -ne 0 ]]
    then
        for logs in $PROC_PATH/ppm_logs
        do
    	    echo "No root detected. proc_ppm exited." > $logs
    	done
    	
    	exit 1
    fi
}; fifth

grep -q android /proc/cmdline && { 
    ANDROID=true
}

four() {
#center
    if [[ "$(getprop sys.boot_completed)" -ne 1 ]] && {
        [[ ! -d "$MODPROC/disable" ]]
    }
    
    then
        su -lp 2000 -c "cmd notification post -S bigtext -t '7secc' 'Tag' 'proc_ppm executed'"
    else
        su 2000 -c "cmd notification post -S bigtext -t '7secc' 'Tag' 'proc_ppm executed'"
    fi
}; four

#main
for main in /proc/ppm
do
    echo '0' > $main/debug
    echo '0x0' > $main/func_debug
    echo '1' > $main/enabled
    echo '1' > $main/exclusive_core
done

for main in /proc/ppm/profile
do
    echo '1' > $main/profile_on
done

#second
for second in /proc/ppm
do
    echo 0 0 > $second/policy_status
    echo 1 0 > $second/policy_status
    echo 2 0 > $second/policy_status
    echo 3 0 > $second/policy_status
    echo 4 0 > $second/policy_status
    echo 5 0 > $second/policy_status
    echo 6 0 > $second/policy_status
    echo 7 0 > $second/policy_status
    echo 8 0 > $second/policy_status
    echo 9 0 > $second/policy_status
done

#third
for third in /proc/ppm/policy
do
    echo 0 0 > $third/sysboost_freq
    echo 1 0 > $third/sysboost_freq
    echo 2 0 > $third/sysboost_freq
    echo 3 0 > $third/sysboost_freq
    echo 4 0 > $third/sysboost_freq
    echo 5 0 > $third/sysboost_freq
    echo 6 0 > $third/sysboost_freq
    echo 7 0 > $third/sysboost_freq
done

for third in /proc/ppm/policy
do
    echo 0 0 > $third/sysboost_cluster_freq_limit
    echo 1 0 > $third/sysboost_cluster_freq_limit
    echo 2 0 > $third/sysboost_cluster_freq_limit
    echo 3 0 > $third/sysboost_cluster_freq_limit
    echo 4 0 > $third/sysboost_cluster_freq_limit
    echo 5 0 > $third/sysboost_cluster_freq_limit
    echo 6 0 > $third/sysboost_cluster_freq_limit
    echo 7 0 > $third/sysboost_cluster_freq_limit
done

for third in /proc/ppm/policy
do
    echo 0 0 > $third/sysboost_cluster_freqidx_limit
    echo 1 0 > $third/sysboost_cluster_freqidx_limit
    echo 2 0 > $third/sysboost_cluster_freqidx_limit
    echo 3 0 > $third/sysboost_cluster_freqidx_limit
    echo 4 0 > $third/sysboost_cluster_freqidx_limit
    echo 5 0 > $third/sysboost_cluster_freqidx_limit
    echo 6 0 > $third/sysboost_cluster_freqidx_limit
    echo 7 0 > $third/sysboost_cluster_freqidx_limit
done

for third in /proc/ppm/policy
do
    echo '0' > $third/thermal_limit
done

#fourth
for fourth in /proc/sys/kernel
do
#mod1
    echo '0 0 0 0' > $fourth/printk
    echo '0' > $fourth/panic
    echo '0' > $fourth/sched_cstate_aware
    echo '0' > $fourth/sched_energy_aware
    echo '0' > $fourth/sched_schedstats
    echo '1' > $fourth/sched_autogroup_enabled
    echo '1' > $fourth/sched_child_runs_first
    echo '1' > $fourth/sched_sync_hint_enable
    echo '1' > $fourth/sched_tunable_scaling
done

#seventh
for seventh in /proc/driver/thermal
do
#mod2
    echo polling_interval 0 > $seventh/tztsAll_enable
    echo switch 1 > $seventh/tztsAll_enable
done

for eighth in $(find /sys/devices/virtual/thermal/*/* -type f -name "mode")
do
#mod3
    echo $eighth
    echo 'disabled' > $eighth
done

#ninth
for ninth in /proc/gpufreq
do
#mod4
    echo '0' > $ninth/gpufreq_opp_stress_test
done

for ninth in /proc/cpufreq
do
#mod5
    echo '0' > $ninth/cpufreq_debug
    echo '0' > $ninth/cpufreq_sched_disable
    echo '0' > $ninth/cpufreq_stress_test
    echo '3' > $ninth/cpufreq_power_mode
    
    echo 0 0 > $ninth/cpufreq_dvfs_time_profile
    echo 1 0 > $ninth/cpufreq_dvfs_time_profile
    echo 2 0 > $ninth/cpufreq_dvfs_time_profile
    echo 3 0 > $ninth/cpufreq_dvfs_time_profile
    echo 4 0 > $ninth/cpufreq_dvfs_time_profile
    echo 5 0 > $ninth/cpufreq_dvfs_time_profile
done

for ninth in /proc/cpufreq/*/
do
#mod6
    echo '1' > $ninth/cpufreq_turbo_mode
done

#tenth
for tenth in /proc/sys/vm
do
#mod7
    echo '100' > $tenth/swappiness
done

for logs in $PROC_PATH/ppm_logs
do
#logs
    echo $PPM_PATH > $logs
done
sync # Sync before execute to avoid crashes
